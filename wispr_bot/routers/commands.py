from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.types.bot_command import BotCommand
from aiogram import Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import os
import uuid
from typing import List, Dict, Optional

from openai import AsyncOpenAI
from openai.types.images_response import ImagesResponse

from ..utils.logger import logger
from ..database.db import db
from ..models.user import User
from ..config import config
from ..services.openai_service import OpenAIService
from ..utils.chat_manager import ChatManager


# Create router
router = Router()


async def set_commands(bot: Bot) -> None:
    """Set bot commands for menu button."""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="newchat", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"),
        BotCommand(command="chats", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã"),
        BotCommand(command="currentchat", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"),
        BotCommand(command="clear_history", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"),
        BotCommand(command="exit", description="–í—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"),
        BotCommand(command="image", description="–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å DALL-E 3"),
    ]
    
    await bot.set_my_commands(commands)


@router.message(Command("start"))
async def start_command(message: Message, user: User) -> None:
    """Send a message when the command /start is issued."""
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wispr Bot, {user.username}!\n\n"
        f"–Ø Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å –º–æ–¥–µ–ª—è–º–∏ OpenAI.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )


@router.message(Command("help"))
async def help_command(message: Message, user: User) -> None:
    """Send a message when the command /help is issued."""
    help_text = """
üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /newchat - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
‚Ä¢ /chats - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã
‚Ä¢ /currentchat - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
‚Ä¢ /clear_history - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
‚Ä¢ /exit - –í—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞

*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
‚Ä¢ /image [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å DALL-E 3
  *–ü—Ä–∏–º–µ—Ä:* `/image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫`

*–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
‚Ä¢ /setapikey - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π API –∫–ª—é—á OpenAI
‚Ä¢ /removeapikey - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π API –∫–ª—é—á
‚Ä¢ /setmodel - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é OpenAI.
–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
"""
    await message.answer(help_text, parse_mode='Markdown')


@router.message(Command("image"))
async def image_command(message: Message, user: User) -> None:
    """Generate an image using DALL-E 3."""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    command_parts = message.text.split(maxsplit=1)
    
    if len(command_parts) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä: `/image –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫`",
            parse_mode="Markdown"
        )
        return
    
    prompt = command_parts[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = user.openai_api_key if user.has_custom_api_key else config.openai_api_key
    
    if not api_key:
        await message.answer(
            "‚ö†Ô∏è API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setapikey –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    status_message = await message.answer("üñå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        client = AsyncOpenAI(api_key=api_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response = await client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            n=1,
        )
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = response.data[0].url
        revised_prompt = response.data[0].revised_prompt
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.edit_message_text(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é...",
            chat_id=message.chat.id,
            message_id=status_message.message_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
        await message.answer_photo(
            photo=image_url,
            caption=f"üñº *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*\n\n"
                   f"*–ó–∞–ø—Ä–æ—Å:* {prompt}\n\n"
                   f"*–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å DALL-E:*\n{revised_prompt}",
            parse_mode="Markdown"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=status_message.message_id
        )
        
        logger.info(f"User {user.telegram_id} generated image with prompt: {prompt}")
        
    except Exception as e:
        logger.error(f"Error generating image: {e}")
        await message.bot.edit_message_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}",
            chat_id=message.chat.id,
            message_id=status_message.message_id
        )


def register_commands(application: Bot) -> None:
    """Register all command handlers in the application."""
    # Command list can be registered here if using a different framework
    pass
