from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from typing import Optional, Dict, Set
import asyncio

from ..utils.logger import logger
from ..database.db import db
from ..models.user import User
from ..models.chat import Chat
from ..config import config
from ..services.openai_service import OpenAIService


# Create router
router = Router()


# Chat states
class ChatStates(StatesGroup):
    """States for chat operations."""
    waiting_for_title = State()
    in_chat = State()  # When user is actively in a chat


# Session storage for active chats
# This is a simple in-memory storage, which will be reset on bot restart
active_chats: Dict[int, int] = {}  # user_id -> chat_id

# Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
processing_users: Set[int] = set()


@router.message(Command("newchat"))
async def new_chat_command(message: Message, state: FSMContext, user: User) -> None:
    """Start creating a new chat."""
    await message.answer(
        "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:"
    )
    
    # Set state to waiting for title
    await state.set_state(ChatStates.waiting_for_title)


@router.message(StateFilter(ChatStates.waiting_for_title), Command("cancel"))
async def cancel_new_chat(message: Message, state: FSMContext) -> None:
    """Cancel new chat creation."""
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.message(StateFilter(ChatStates.waiting_for_title))
async def process_new_chat_title(message: Message, state: FSMContext, user: User) -> None:
    """Process the title for a new chat."""
    # Get title from message
    title = message.text.strip()
    
    # Get user's preferred model or use default
    model = user.preferred_model or config.default_model
    
    # Create new chat
    chat = await db.create_chat(
        user_id=user.telegram_id,
        title=title,
        model=model
    )
    
    # Set active chat for user
    active_chats[user.telegram_id] = chat.id
    
    # Set state to in chat
    await state.set_state(ChatStates.in_chat)
    await state.update_data(chat_id=chat.id)
    
    await message.answer(
        f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: \"{title}\"\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –º–æ–¥–µ–ª—å—é {model}.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä."
    )
    logger.info(f"User {user.telegram_id} created new chat {chat.id}: {title}")


@router.message(Command("chats"))
async def list_chats(message: Message, user: User) -> None:
    """List user's chats."""
    # Get user's chats
    chats = await db.get_user_chats(user.telegram_id)
    
    if not chats:
        await message.answer(
            "üìù –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —á–∞—Ç–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç."
        )
        return
    
    # Build keyboard with chats
    builder = InlineKeyboardBuilder()
    
    for chat in chats[:10]:  # Limit to first 10 chats to avoid huge keyboards
        builder.button(
            text=f"{chat['title']} ({chat['model']})",
            callback_data=f"chat:{chat['id']}"
        )
    
    # Add a button for more chats if needed
    if len(chats) > 10:
        builder.button(
            text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ...",
            callback_data="chats:more"
        )
    
    builder.adjust(1)  # One button per row
    
    await message.answer(
        f"üìù –í–∞—à–∏ —á–∞—Ç—ã ({len(chats)}):\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∞—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("chat:"))
async def select_chat(callback: CallbackQuery, state: FSMContext, user: User) -> None:
    """Select a chat to continue."""
    # Get chat id from callback data
    chat_id = int(callback.data.split(":", 1)[1])
    
    # Get chat from database
    chat = await db.get_chat(chat_id)
    
    if not chat or chat.user_id != user.telegram_id:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", show_alert=True)
        return
    
    # Set active chat for user
    active_chats[user.telegram_id] = chat.id
    
    # Set state to in chat
    await state.set_state(ChatStates.in_chat)
    await state.update_data(chat_id=chat.id)
    
    await callback.answer()
    await callback.message.answer(
        f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —á–∞—Ç: \"{chat.title}\"\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –º–æ–¥–µ–ª—å—é {chat.model}.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä."
    )
    logger.info(f"User {user.telegram_id} switched to chat {chat.id}")


@router.message(Command("deletechat"))
async def delete_chat_command(message: Message, user: User) -> None:
    """Start the process to delete a chat."""
    # Get user's chats
    chats = await db.get_user_chats(user.telegram_id)
    
    if not chats:
        await message.answer("üìù –£ –≤–∞—Å –Ω–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    # Build keyboard with chats to delete
    builder = InlineKeyboardBuilder()
    
    for chat in chats[:10]:  # Limit to first 10 chats
        builder.button(
            text=f"üóë {chat['title']}",
            callback_data=f"delete_chat:{chat['id']}"
        )
    
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="delete_chat:cancel"
    )
    
    builder.adjust(1)  # One button per row
    
    await message.answer(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("delete_chat:"))
async def delete_chat_callback(callback: CallbackQuery, user: User, state: FSMContext) -> None:
    """Handle chat deletion."""
    # Get chat id from callback data
    chat_id_str = callback.data.split(":", 1)[1]
    
    if chat_id_str == "cancel":
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    chat_id = int(chat_id_str)
    
    # Delete chat
    success = await db.delete_chat(chat_id)
    
    if success:
        # If deleted chat was active, clear the active chat
        if active_chats.get(user.telegram_id) == chat_id:
            active_chats.pop(user.telegram_id, None)
            # Also clear state if we're in this chat
            current_data = await state.get_data()
            if current_data.get('chat_id') == chat_id:
                await state.clear()
        
        await callback.answer("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        await callback.message.edit_text("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        logger.info(f"User {user.telegram_id} deleted chat {chat_id}")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç", show_alert=True)
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç")


@router.message(Command("currentchat"))
async def current_chat_info(message: Message, user: User, state: FSMContext) -> None:
    """Show information about the current active chat."""
    # Check if user has an active chat
    chat_id = active_chats.get(user.telegram_id)
    
    if not chat_id:
        await message.answer(
            "‚ùì –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç, –∏–ª–∏ /chats, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π."
        )
        return
    
    # Get chat from database
    chat = await db.get_chat(chat_id)
    
    if not chat:
        # Chat not found - maybe it was deleted
        active_chats.pop(user.telegram_id, None)
        await state.clear()
        await message.answer(
            "‚ùì –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç, –∏–ª–∏ /chats, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π."
        )
        return
    
    # Show chat info
    msg_count = len(chat.messages)
    await message.answer(
        f"üìù –¢–µ–∫—É—â–∏–π —á–∞—Ç: \"{chat.title}\"\n\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: {chat.model}\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {chat.created_at.strftime('%Y-%m-%d')}\n"
        f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chats, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —á–∞—Ç."
    )


@router.message(StateFilter(ChatStates.in_chat))
async def process_chat_message(message: Message, state: FSMContext, user: User) -> None:
    """Process a message in an active chat."""
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/", —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if message.text.startswith('/'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.telegram_id in processing_users:
        await message.answer(
            "‚è≥ –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
    processing_users.add(user.telegram_id)
    
    try:
        # Get chat id from state
        data = await state.get_data()
        chat_id = data.get('chat_id')
        
        # If no chat id in state, try to get from active chats
        if not chat_id:
            chat_id = active_chats.get(user.telegram_id)
            
            # If still no chat id, create a new chat
            if not chat_id:
                await message.answer(
                    "‚ùì –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.\n\n"
                    "–Ø —Å–æ–∑–¥–∞–º –Ω–æ–≤—ã–π –¥–ª—è –≤–∞—Å.",
                )
                # Create new chat with default title
                chat = await db.create_chat(
                    user_id=user.telegram_id,
                    title=f"–ß–∞—Ç {message.date.strftime('%Y-%m-%d %H:%M')}",
                    model=user.preferred_model or config.default_model
                )
                chat_id = chat.id
                # Set active chat and update state
                active_chats[user.telegram_id] = chat_id
                await state.update_data(chat_id=chat_id)
        
        # Get chat from database
        chat = await db.get_chat(chat_id)
        
        if not chat:
            # Chat not found - maybe it was deleted
            active_chats.pop(user.telegram_id, None)
            await state.clear()
            await message.answer(
                "‚ùì –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–Ø —Å–æ–∑–¥–∞–º –Ω–æ–≤—ã–π –¥–ª—è –≤–∞—Å."
            )
            # Create new chat with default title
            chat = await db.create_chat(
                user_id=user.telegram_id,
                title=f"–ß–∞—Ç {message.date.strftime('%Y-%m-%d %H:%M')}",
                model=user.preferred_model or config.default_model
            )
            chat_id = chat.id
            # Set active chat and update state
            active_chats[user.telegram_id] = chat_id
            await state.set_state(ChatStates.in_chat)
            await state.update_data(chat_id=chat_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –Ω–∞ –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—á–∞–µ–º
        current_user_message = message.text
        
        # Add user message to chat
        await db.add_message(chat_id, "user", current_user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        temp_message = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
        
        # Send "typing" action
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # Process with OpenAI
        openai_service = OpenAIService(user.openai_api_key if user.has_custom_api_key else None)
        
        # Get messages context from chat
        context_messages = chat.get_context_messages(current_user_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if not context_messages:
            await message.bot.edit_message_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.",
                chat_id=message.chat.id,
                message_id=temp_message.message_id
            )
            return
        
        # Call OpenAI API
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å "typing"
            typing_task = asyncio.create_task(
                keep_typing(message.bot, message.chat.id)
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π
            final_response = ""
            update_counter = 0
            update_interval = 20  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API Telegram
            
            async for response_chunk in openai_service.generate_response_stream(
                messages=context_messages,
                model=chat.model
            ):
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                if response_chunk.startswith("‚ö†Ô∏è –û—à–∏–±–∫–∞"):
                    final_response = response_chunk
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                # —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Telegram
                update_counter += 1
                if update_counter % update_interval == 0:
                    try:
                        # –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if len(response_chunk) <= 4096:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                            await message.bot.edit_message_text(
                                response_chunk + " ‚è≥",  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                                chat_id=message.chat.id,
                                message_id=temp_message.message_id
                            )
                    except Exception as e:
                        logger.warning(f"Error updating partial response: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                final_response = response_chunk
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å "typing"
            typing_task.cancel()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if not final_response:
                final_response = "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É
            await db.add_message(chat_id, "assistant", final_response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º (–±–æ–ª—å—à–µ –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏)
            try:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
                if len(final_response) > 4096:
                    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=temp_message.message_id
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏
                    for i in range(0, len(final_response), 4000):
                        part = final_response[i:i+4000]
                        await message.answer(part)
                else:
                    await message.bot.edit_message_text(
                        final_response,
                        chat_id=message.chat.id,
                        message_id=temp_message.message_id
                    )
            except Exception as e:
                logger.error(f"Error sending final response: {e}")
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            logger.error(f"Error generating response: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            await message.bot.edit_message_text(
                error_message,
                chat_id=message.chat.id,
                message_id=temp_message.message_id
            )
            
            await db.add_message(chat_id, "assistant", error_message)
    
    finally:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        processing_users.discard(user.telegram_id)


async def keep_typing(bot: Bot, chat_id: int, interval: float = 4.0):
    """Keep sending typing action to keep the user informed about ongoing processing."""
    try:
        while True:
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(interval)
    except asyncio.CancelledError:
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        pass
    except Exception as e:
        logger.error(f"Error in keep_typing: {e}")


@router.message(Command("exit"))
async def exit_chat(message: Message, state: FSMContext, user: User) -> None:
    """Exit current chat."""
    # Clear active chat
    active_chats.pop(user.telegram_id, None)
    
    # Clear state
    await state.clear()
    
    await message.answer(
        "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chats, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç, –∏–ª–∏ /newchat, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π."
    )
    
    
@router.message(Command("clear_history"))
async def clear_chat_history(message: Message, state: FSMContext, user: User) -> None:
    """Clear history of the current chat."""
    # Get chat id from active chats
    chat_id = active_chats.get(user.telegram_id)
    
    if not chat_id:
        await message.answer(
            "‚ùì –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç, –∏–ª–∏ /chats, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π."
        )
        return
    
    # Get chat from database
    chat = await db.get_chat(chat_id)
    
    if not chat:
        await message.answer(
            "‚ùì –í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç, –∏–ª–∏ /chats, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π."
        )
        active_chats.pop(user.telegram_id, None)
        await state.clear()
        return
        
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —Ç–µ–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –º–æ–¥–µ–ª—å—é, –Ω–æ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
    new_chat = await db.create_chat(
        user_id=user.telegram_id,
        title=f"{chat.title} (–æ—á–∏—â–µ–Ω)",
        model=chat.model,
        system_prompt=chat.system_prompt
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    active_chats[user.telegram_id] = new_chat.id
    await state.update_data(chat_id=new_chat.id)
    
    await message.answer(
        f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç \"{new_chat.title}\".\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –º–æ–¥–µ–ª—å—é {new_chat.model}."
    )
    logger.info(f"User {user.telegram_id} cleared chat history. Created new chat {new_chat.id}") 