from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext

from ..utils.logger import logger
from ..database.db import db
from ..models.user import User
from ..config import config


# Create router
router = Router()


# Admin-only filter
def is_admin(message: Message) -> bool:
    """Check if user is an admin."""
    return message.from_user.id in config.admin_user_ids


@router.message(Command("admin"), is_admin)
async def admin_panel(message: Message, user: User) -> None:
    """Show admin panel."""
    commands = [
        "/allow <user_id> - –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞",
        "/disallow <user_id> - –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞",
        "/list_users - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"
    ]
    
    await message.answer(
        f"üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands)
    )


@router.message(Command("allow"), is_admin)
async def allow_user(message: Message, command: CommandObject) -> None:
    """Allow a user to use the bot."""
    # Check if user_id is provided
    if not command.args:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /allow <user_id>")
        return
    
    try:
        user_id = int(command.args)
        
        # Get user from database
        user = await db.get_user(user_id)
        
        if not user:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # Update user's allowed status
        await db.update_user_allowed_status(user_id, True)
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} ({user_id}) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É")
        logger.info(f"User {user_id} allowed by admin {message.from_user.id}")
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID")


@router.message(Command("disallow"), is_admin)
async def disallow_user(message: Message, command: CommandObject) -> None:
    """Disallow a user from using the bot."""
    # Check if user_id is provided
    if not command.args:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /disallow <user_id>")
        return
    
    try:
        user_id = int(command.args)
        
        # Check if attempting to disallow an admin
        if user_id in config.admin_user_ids:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        # Get user from database
        user = await db.get_user(user_id)
        
        if not user:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # Update user's allowed status
        await db.update_user_allowed_status(user_id, False)
        
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} ({user_id}) –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É")
        logger.info(f"User {user_id} disallowed by admin {message.from_user.id}")
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID")


@router.message(Command("list_users"), is_admin)
async def list_users(message: Message) -> None:
    """List all users."""
    # Get all allowed users
    allowed_users = await db.get_allowed_users()
    
    if not allowed_users:
        await message.answer("üìù –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # Format user list
    user_list = "\n".join([
        f"‚Ä¢ {user.full_name} (ID: {user.telegram_id})"
        f"{' [–°–≤–æ–π API –∫–ª—é—á]' if user.has_custom_api_key else ''}"
        for user in allowed_users
    ])
    
    await message.answer(
        f"üìù –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(allowed_users)}):\n\n{user_list}"
    )


@router.message(Command("stats"), is_admin)
async def stats(message: Message) -> None:
    """Show bot statistics."""
    # Get all users
    all_users = await db.get_allowed_users()
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        f"–í—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å–≤–æ–∏–º API –∫–ª—é—á–æ–º: {sum(1 for user in all_users if user.has_custom_api_key)}"
    ) 